<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-06-30T23:16:07+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">박52님 그냥저냥 블로그</title><subtitle>공부한 거 안 까먹을려고, 기록하는 Blog</subtitle><entry><title type="html">Hello World</title><link href="http://localhost:4000/jekyll/update/2024/06/30/hello-world.html" rel="alternate" type="text/html" title="Hello World" /><published>2024-06-30T21:00:00+09:00</published><updated>2024-06-30T21:00:00+09:00</updated><id>http://localhost:4000/jekyll/update/2024/06/30/hello-world</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/06/30/hello-world.html"><![CDATA[<p>첫 번째 포스트입니다! GitHub Pages 블로그가 잘 작동하네요.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[첫 번째 포스트입니다! GitHub Pages 블로그가 잘 작동하네요.]]></summary></entry><entry><title type="html">C++ 최적화 - 4장 문자열 최적화</title><link href="http://localhost:4000/study/2024/06/30/Optimized-C++-Chapter4.html" rel="alternate" type="text/html" title="C++ 최적화 - 4장 문자열 최적화" /><published>2024-06-30T21:00:00+09:00</published><updated>2024-06-30T21:00:00+09:00</updated><id>http://localhost:4000/study/2024/06/30/Optimized-C++-Chapter4</id><content type="html" xml:base="http://localhost:4000/study/2024/06/30/Optimized-C++-Chapter4.html"><![CDATA[<h2 id="4장-문자열-최적화-요약">4장 문자열 최적화 요약</h2>

<h3 id="문자열-연산의-비용">문자열 연산의 비용</h3>
<p>문자열 연산은 많은 경우 매우 비싼 작업입니다. 문자열의 크기, 메모리 할당, 복사, 비교 등이 그 원인입니다. 따라서 문자열 최적화는 성능 향상을 위해 매우 중요합니다.</p>

<h3 id="주요-최적화-기법">주요 최적화 기법</h3>

<ol>
  <li><strong>문자열 리터럴 사용</strong>
    <ul>
      <li>문자열 리터럴을 사용하면 메모리 할당과 해제가 줄어들어 성능이 향상됩니다.
        <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"Hello, World!"</span><span class="p">;</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><strong>불필요한 복사 피하기</strong>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">std::string</code> 객체를 복사하면 전체 문자열이 복사되어 비효율적입니다. 이를 피하기 위해 참조를 사용하거나 <code class="language-plaintext highlighter-rouge">std::move</code>를 활용합니다.
        <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kt">void</span> <span class="nf">processString</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">);</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><strong>StringBuilder 패턴</strong>
    <ul>
      <li>많은 문자열을 연결할 때는 임시 객체가 많이 생성되지 않도록 StringBuilder와 같은 패턴을 사용하는 것이 좋습니다.
        <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kt">void</span> <span class="nf">example3</span><span class="p">()</span> 
 <span class="p">{</span>
   <span class="n">std</span><span class="o">::</span><span class="n">ostringstream</span> <span class="n">builder</span><span class="p">;</span>
   <span class="n">builder</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello"</span> <span class="o">&lt;&lt;</span> <span class="s">", "</span> <span class="o">&lt;&lt;</span> <span class="s">"World!"</span><span class="p">;</span>
   <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">result</span> <span class="o">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
 <span class="p">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><strong>SBO (Small Buffer Optimization) 활용</strong>
    <ul>
      <li>많은 구현체에서 작은 문자열에 대해 동적 메모리 할당을 피하고 스택에 저장하는 최적화 기법을 사용합니다. <code class="language-plaintext highlighter-rouge">std::string</code>의 SBO를 이해하고 활용하는 것이 중요합니다.</li>
    </ul>
  </li>
  <li><strong>std::string_view 사용</strong>
    <ul>
      <li>문자열의 일부를 참조할 때 <code class="language-plaintext highlighter-rouge">std::string_view</code>를 사용하면 추가 복사 없이 효율적으로 문자열을 처리할 수 있습니다.
 ```cpp
 void processStringView(std::string_view sv) 
 {
   std::cout « sv « std::endl;
 }</li>
    </ul>

    <p>void example4() 
 {
     std::string myString = “Hello, World!”;
     processStringView(myString);
 }
 ```</p>
  </li>
  <li><strong>메모리 풀 사용</strong>
    <ul>
      <li>많은 문자열 할당과 해제가 반복되는 경우 메모리 풀이 유용할 수 있습니다. 이는 메모리 단편화를 줄이고 성능을 향상시킵니다.
        <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"Hello, World!"</span><span class="p">;</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><strong>코드 예제</strong>
    <ul>
      <li>문자열 리터럴과 불필요한 복사 피하기
 ```cpp
 void example1() 
 {
  const char* str = “Hello, World!”;
  std::cout « str « std::endl;
 }</li>
    </ul>

    <p>void processString(const std::string&amp; str) 
 {
     std::cout « str « std::endl;
 }</p>

    <p>void example2() 
 {
     std::string myString = “Hello, World!”;
     processString(myString);
 }
 ```</p>
  </li>
</ol>]]></content><author><name></name></author><category term="study" /><summary type="html"><![CDATA[4장 문자열 최적화 요약]]></summary></entry></feed>